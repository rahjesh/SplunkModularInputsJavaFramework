<project
    name="Splunk Modular Inputs"
    basedir=".."
    default="build_framework" >

    <description>
		Splunk Modular Inputs Java Framework
    </description>

    <property file="build/build.properties" />

    <path id="project.class.path" >

        <fileset dir="${lib}" >

            <include name="**/*.jar" />
        </fileset>
        
        <fileset dir="3rdParty" >

            <include name="**/*.jar" />
        </fileset>
    </path>

    <target name="init" >

        <delete dir="${temp_build}" />

        <mkdir dir="${temp_build}" />
    </target>

    <target
        name="compile_framework"
        depends="init"
        description="compile the source " >

        <mkdir dir="${temp_build}/${classes}" />

        <javac
            destdir="${temp_build}/${classes}"
            srcdir="${src}"
            target="${javaClassTarget}">

            <classpath refid="project.class.path" />
        </javac>
    </target>

    <target
        name="compile_addon"
        depends="init"
        description="compile an addon " >

        <mkdir dir="${temp_build}/${classes}" />

        <javac
            destdir="${temp_build}/${classes}"
            target="${javaClassTarget}" >

            <src path="${src}" />

            <src path="${addon}/${src}" />

            <classpath refid="project.class.path" />

            <classpath>

                <fileset dir="${addon}/bin/${lib}" >
                    <include name="**/*.jar" />
                </fileset>
            </classpath>
            
        </javac>
    </target>

    <target
        name="build_helloworld_input"
        description="build Hello World input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${helloworld_dir}" />
        </antcall>

        <loadproperties srcFile="${helloworld_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${helloworld_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${helloworld_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${helloworld_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${helloworld_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${helloworld_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${helloworld_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${helloworld_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>
    
    <target
        name="build_binary_input"
        description="build Binary modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${binary_dir}" />
        </antcall>

        <loadproperties srcFile="${binary_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${binary_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${binary_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${binary_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${binary_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${binary_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${binary_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${binary_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>
    
    <target
        name="build_jms_input"
        description="build JMS modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${jms_dir}" />
        </antcall>

        <loadproperties srcFile="${jms_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${jms_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${jms_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${jms_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${jms_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${jms_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${jms_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${jms_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>

    <target
        name="build_amqp_input"
        description="build AMQP modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${amqp_dir}" />
        </antcall>

        <loadproperties srcFile="${amqp_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${amqp_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${amqp_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${amqp_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${amqp_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${amqp_dir}/static" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${amqp_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${amqp_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${amqp_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>

<target
        name="build_kafka_input"
        description="build Kafka modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${kafka_dir}" />
        </antcall>

        <loadproperties srcFile="${kafka_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${kafka_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${kafka_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${kafka_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${kafka_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${kafka_dir}/static" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${kafka_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${kafka_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${kafka_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>

	<target
	        name="build_alexa_input"
	        description="build alexa input" >

	        <antcall target="compile_addon" >

	            <param
	                name="addon"
	                value="${alexa_dir}" />
	        </antcall>

	        <loadproperties srcFile="${alexa_dir}/default/app.conf" />

	        <copy todir="${temp_build}/metadata" >

	            <fileset dir="${alexa_dir}/metadata" />
	        </copy>
		
		<copy todir="${temp_build}/soundbites" >

			            <fileset dir="${alexa_dir}/soundbites" />
			        </copy>
	        	
	        	<copy todir="${temp_build}/dynamic_actions" >

	        		            <fileset dir="${alexa_dir}/dynamic_actions" />
	        		        </copy>

	        <copy todir="${temp_build}/bin" >

	            <fileset dir="${alexa_dir}/bin" />
	        </copy>

	        <copy todir="${temp_build}/appserver" >

	            <fileset dir="${alexa_dir}/appserver" />
	        </copy>
		
		    <copy todir="${temp_build}/alexa_assets" >

			     <fileset dir="${alexa_dir}/alexa_assets" />
			</copy>
	        <copy todir="${temp_build}/crypto" >

		         <fileset dir="${alexa_dir}/crypto" />
		    </copy>
	        <copy todir="${temp_build}/docs" >

		         <fileset dir="${alexa_dir}/docs" />
		    </copy>
	        <copy todir="${temp_build}/intents" >

		        <fileset dir="${alexa_dir}/intents" />
		    </copy>
	        <copy todir="${temp_build}/default" >

	            <fileset dir="${alexa_dir}/default" />
	        </copy>
	        
	        <copy todir="${temp_build}/static" >

	            <fileset dir="${alexa_dir}/static" />
	        </copy>
	        
	        <copy todir="${temp_build}/README" >

	            <fileset dir="${alexa_dir}/README" />
	        </copy>

	        <copy todir="${temp_build}/bin/${lib}" >

	            <fileset dir="${lib}" />

	            <fileset dir="${alexa_dir}/bin/${lib}" />
	        </copy>

	        <jar jarfile="${temp_build}/bin/${lib}/${alexa_jar}" >

	            <fileset
	                dir="${temp_build}/${classes}"
	                includes="com/splunk/modinput/**" />

	            <fileset file="${src}/log4j.xml" />
	        </jar>

	        <delete dir="${temp_build}/${classes}" />

	        <tar
	            compression="${compressionType}"
	            destfile="${release}/${id}-${version}${suffix}" >

	            <zipfileset
	                dir="${temp_build}"
	                prefix="${id}" />
	        </tar>

	        <delete dir="${temp_build}" />
	    </target>
	            	
<target
        name="build_protocol_input"
        description="build Protocol modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${protocol_dir}" />
        </antcall>

        <loadproperties srcFile="${protocol_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${protocol_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${protocol_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${protocol_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${protocol_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${protocol_dir}/static" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${protocol_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${protocol_dir}/bin/${lib}" />
        </copy>
        
        <copy todir="${temp_build}/bin/datahandlers" >

            <fileset dir="${protocol_dir}/bin/datahandlers" />
        </copy>
        
        <copy todir="${temp_build}/bin/vertx_modules" >

            <fileset dir="${protocol_dir}/bin/vertx_modules" />
        </copy>
        
        <copy todir="${temp_build}/bin/vertx_conf" >

            <fileset dir="${protocol_dir}/bin/vertx_conf" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${protocol_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>
    
<target
        name="build_mqtt_input"
        description="build MQTT modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${mqtt_dir}" />
        </antcall>

        <loadproperties srcFile="${mqtt_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${mqtt_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${mqtt_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${mqtt_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${mqtt_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${mqtt_dir}/static" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${mqtt_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${mqtt_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${mqtt_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>

<target
        name="build_coap_input"
        description="build COAP modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${coap_dir}" />
        </antcall>

        <loadproperties srcFile="${coap_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${coap_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${coap_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${coap_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${coap_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${coap_dir}/static" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${coap_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${coap_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${coap_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>


<target
        name="build_mq_input"
        description="build MQ modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${mq_dir}" />
        </antcall>

        <loadproperties srcFile="${mq_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${mq_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${mq_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${mq_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${mq_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${mq_dir}/static" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${mq_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${mq_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${mq_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>


<target
        name="build_kinesis_input"
        description="build Kinesis modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${kinesis_dir}" />
        </antcall>

        <loadproperties srcFile="${kinesis_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${kinesis_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${kinesis_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${kinesis_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${kinesis_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${kinesis_dir}/static" />
        </copy>
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${kinesis_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />

            <fileset dir="${kinesis_dir}/bin/${lib}" />
        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${kinesis_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset file="${src}/log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${id}-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${id}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>


    <target
        name="build_jmx_input"
        description="build JMX modular input add on" >

        <antcall target="compile_addon" >

            <param
                name="addon"
                value="${jmx_dir}" />
        </antcall>

        <loadproperties srcFile="${jmx_dir}/default/app.conf" />

        <copy todir="${temp_build}/metadata" >

            <fileset dir="${jmx_dir}/metadata" />
        </copy>

        <copy todir="${temp_build}/bin" >

            <fileset dir="${jmx_dir}/bin" />
        </copy>

        <copy todir="${temp_build}/appserver" >

            <fileset dir="${jmx_dir}/appserver" />
        </copy>

        <copy todir="${temp_build}/default" >

            <fileset dir="${jmx_dir}/default" />
        </copy>
        
        <copy todir="${temp_build}/static" >

            <fileset dir="${jmx_dir}/static" />
        </copy>
        
        
        <copy todir="${temp_build}/README" >

            <fileset dir="${jmx_dir}/README" />
        </copy>

        <copy todir="${temp_build}/bin/${lib}" >

            <fileset dir="${lib}" />


        </copy>

        <jar jarfile="${temp_build}/bin/${lib}/${jmx_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**, com/dtdsoftware/splunk/**" />

            <fileset file="${src}/log4j.xml" />

            <fileset file="${jmx_dir}/schema/mapping.xml" />

            <fileset file="${jmx_dir}/schema/config.xsd" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/jmx_ta-${version}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="SPLUNK4JMX" />
        </tar>

        <delete dir="${temp_build}" />
    </target>


    <target
        name="build_framework"
        depends="compile_framework"
        description="build framework distribution" >

        <!-- Create the distribution directory -->

        <copy todir="${temp_build}/${lib}" >

            <fileset dir="${lib}" />
        </copy>

        <copy todir="${temp_build}" >

            <fileset file="LICENSE" />

            <fileset file="README.md" />
        </copy>

        <jar jarfile="${temp_build}/${lib}/${main_jar}" >

            <fileset
                dir="${temp_build}/${classes}"
                includes="com/splunk/modinput/**" />

            <fileset
                dir="${src}"
                includes="log4j.xml" />
        </jar>

        <delete dir="${temp_build}/${classes}" />

        <tar
            compression="${compressionType}"
            destfile="${release}/${frameworkid}-${frameworkversion}${suffix}" >

            <zipfileset
                dir="${temp_build}"
                prefix="${frameworkid}" />
        </tar>

        <delete dir="${temp_build}" />
    </target>

</project>